#!/usr/bin/env python3
"""
Script interactivo para clasificar servicios en la nube.
Permite al usuario ingresar texto y ver la clasificaci√≥n en tiempo real.
"""

from cloud_classifier import CloudServiceClassifier
import sys

def print_banner():
    """Imprime el banner del programa."""
    print("=" * 60)
    print("üå©Ô∏è  CLASIFICADOR INTERACTIVO DE SERVICIOS EN LA NUBE üå©Ô∏è")
    print("=" * 60)
    print("Tipos de servicios que puede identificar:")
    print("‚Ä¢ IaaS (Infrastructure as a Service)")
    print("‚Ä¢ PaaS (Platform as a Service)")
    print("‚Ä¢ SaaS (Software as a Service)")
    print("‚Ä¢ FaaS (Function as a Service)")
    print("=" * 60)
    print("Comandos disponibles:")
    print("‚Ä¢ 'salir' o 'exit' para terminar")
    print("‚Ä¢ 'ayuda' o 'help' para mostrar esta informaci√≥n")
    print("‚Ä¢ 'ejemplos' para ver ejemplos de clasificaci√≥n")
    print("=" * 60)

def print_examples():
    """Muestra ejemplos de clasificaci√≥n."""
    examples = [
        ("Amazon EC2 proporciona servidores virtuales en la nube", "IaaS"),
        ("Heroku es una plataforma de desarrollo para aplicaciones", "PaaS"),
        ("Salesforce es una aplicaci√≥n CRM accesible desde el navegador", "SaaS"),
        ("AWS Lambda ejecuta funciones sin servidor basadas en eventos", "FaaS"),
        ("Microsoft Azure ofrece servicios de infraestructura en la nube", "IaaS"),
        ("Google App Engine proporciona un entorno de ejecuci√≥n", "PaaS"),
        ("Office 365 es software como servicio para productividad", "SaaS"),
        ("Azure Functions permite crear funciones serverless", "FaaS")
    ]
    
    print("\nüìã EJEMPLOS DE CLASIFICACI√ìN:")
    print("-" * 60)
    
    for i, (text, expected) in enumerate(examples, 1):
        print(f"{i}. Texto: {text}")
        print(f"   Esperado: {expected}")
        print()

def classify_text(classifier, text):
    """Clasifica un texto y muestra los resultados de forma formateada."""
    print(f"\nüîç Analizando: '{text}'")
    print("-" * 50)
    
    result = classifier.classify(text)
    
    # Mostrar clasificaci√≥n principal
    if result['is_cloud_service']:
        print(f"‚úÖ CLASIFICACI√ìN: {result['classification']}")
        print(f"üìä CONFIANZA: {result['confidence']}%")
    else:
        print("‚ùå NO CLASIFICADO COMO SERVICIO EN LA NUBE")
    
    # Mostrar puntajes detallados
    print(f"\nüìà PUNTAJES DETALLADOS:")
    scores = result['scores']
    for service_type, score in sorted(scores.items(), key=lambda x: x[1], reverse=True):
        bar_length = int(score * 5)  # Escalar para visualizaci√≥n
        bar = "‚ñà" * bar_length + "‚ñë" * (20 - bar_length)
        print(f"   {service_type:4s}: {score:4.1f} {bar}")
    
    # Mostrar explicaci√≥n
    explanation = classifier.get_explanation(result)
    print(f"\nüí° EXPLICACI√ìN:")
    print(explanation)
    
    print("-" * 50)

def main():
    """Funci√≥n principal del programa interactivo."""
    classifier = CloudServiceClassifier()
    
    print_banner()
    
    while True:
        try:
            # Obtener entrada del usuario
            user_input = input("\nüå©Ô∏è  Ingrese texto para clasificar (o comando): ").strip()
            
            # Verificar comandos especiales
            if user_input.lower() in ['salir', 'exit', 'quit']:
                print("\nüëã ¬°Hasta luego! Gracias por usar el clasificador.")
                break
            elif user_input.lower() in ['ayuda', 'help', 'h']:
                print_banner()
                continue
            elif user_input.lower() in ['ejemplos', 'examples', 'e']:
                print_examples()
                continue
            elif not user_input:
                print("‚ö†Ô∏è  Por favor ingrese alg√∫n texto.")
                continue
            
            # Clasificar el texto
            classify_text(classifier, user_input)
            
        except KeyboardInterrupt:
            print("\n\nüëã ¬°Hasta luego! Gracias por usar el clasificador.")
            break
        except Exception as e:
            print(f"\n‚ùå Error: {e}")
            print("Por favor, intente de nuevo.")

if __name__ == "__main__":
    main()
