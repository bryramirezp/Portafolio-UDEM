#!/usr/bin/env python3
"""
Script de prueba para el clasificador de servicios en la nube.
Demuestra diferentes casos de uso y escenarios de clasificaci√≥n.
"""

from cloud_classifier import CloudServiceClassifier
import json

def test_basic_classification():
    """Prueba la clasificaci√≥n b√°sica con ejemplos simples."""
    print("üß™ PRUEBA 1: Clasificaci√≥n B√°sica")
    print("=" * 50)
    
    classifier = CloudServiceClassifier()
    
    test_cases = [
        "Amazon EC2 es un servicio de infraestructura como servicio",
        "Google App Engine es una plataforma como servicio para desarrollo",
        "Salesforce es software como servicio para gesti√≥n de clientes",
        "AWS Lambda es funci√≥n como servicio sin servidor"
    ]
    
    for i, text in enumerate(test_cases, 1):
        result = classifier.classify(text)
        print(f"{i}. Texto: {text}")
        print(f"   Clasificaci√≥n: {result['classification']}")
        print(f"   Confianza: {result['confidence']}%")
        print()

def test_complex_texts():
    """Prueba con textos m√°s complejos y realistas."""
    print("üß™ PRUEBA 2: Textos Complejos")
    print("=" * 50)
    
    classifier = CloudServiceClassifier()
    
    complex_cases = [
        {
            "text": "Microsoft Azure Virtual Machines proporciona instancias de computaci√≥n escalables con diferentes configuraciones de CPU, RAM y almacenamiento SSD. Los usuarios pueden crear m√°quinas virtuales Windows o Linux seg√∫n sus necesidades.",
            "expected": "IaaS"
        },
        {
            "text": "Heroku es una plataforma de desarrollo que permite a los desarrolladores desplegar aplicaciones web de forma autom√°tica. Incluye herramientas de CI/CD, monitoreo y escalado autom√°tico sin necesidad de gestionar la infraestructura subyacente.",
            "expected": "PaaS"
        },
        {
            "text": "Office 365 es una suite de aplicaciones de productividad que incluye Word, Excel, PowerPoint y Outlook. Los usuarios acceden a trav√©s del navegador web con una suscripci√≥n mensual o anual, sin necesidad de instalar software localmente.",
            "expected": "SaaS"
        },
        {
            "text": "Google Cloud Functions permite ejecutar c√≥digo en respuesta a eventos como cambios en Cloud Storage, mensajes de Pub/Sub o solicitudes HTTP. Es un servicio serverless que escala autom√°ticamente y solo cobra por el tiempo de ejecuci√≥n.",
            "expected": "FaaS"
        }
    ]
    
    for i, case in enumerate(complex_cases, 1):
        result = classifier.classify(case["text"])
        correct = result['classification'] == case['expected']
        status = "‚úÖ" if correct else "‚ùå"
        
        print(f"{i}. {status} Texto: {case['text'][:80]}...")
        print(f"   Esperado: {case['expected']}")
        print(f"   Obtenido: {result['classification']}")
        print(f"   Confianza: {result['confidence']}%")
        print()

def test_edge_cases():
    """Prueba casos l√≠mite y textos ambiguos."""
    print("üß™ PRUEBA 3: Casos L√≠mite")
    print("=" * 50)
    
    classifier = CloudServiceClassifier()
    
    edge_cases = [
        "Este es un texto sobre cocina que no tiene nada que ver con la nube",
        "La nube es un concepto meteorol√≥gico que describe la acumulaci√≥n de vapor de agua",
        "AWS ofrece m√∫ltiples servicios incluyendo EC2, Lambda y S3",
        "El desarrollo de software moderno utiliza herramientas en la nube",
        "Los servidores f√≠sicos son diferentes a los servicios en la nube"
    ]
    
    for i, text in enumerate(edge_cases, 1):
        result = classifier.classify(text)
        print(f"{i}. Texto: {text}")
        print(f"   Clasificaci√≥n: {result['classification']}")
        print(f"   Es servicio en la nube: {result['is_cloud_service']}")
        print(f"   Confianza: {result['confidence']}%")
        print()

def test_multilingual():
    """Prueba clasificaci√≥n en diferentes idiomas."""
    print("üß™ PRUEBA 4: Clasificaci√≥n Multiling√ºe")
    print("=" * 50)
    
    classifier = CloudServiceClassifier()
    
    multilingual_cases = [
        ("Amazon EC2 provides virtual servers in the cloud", "IaaS"),
        ("Heroku is a development platform for deploying applications", "PaaS"),
        ("Salesforce is a CRM application accessible via web browser", "SaaS"),
        ("AWS Lambda executes serverless functions based on events", "FaaS"),
        ("Azure VM ofrece m√°quinas virtuales con CPU y RAM configurables", "IaaS"),
        ("Google App Engine proporciona un entorno de ejecuci√≥n", "PaaS"),
        ("Office 365 es software como servicio para productividad", "SaaS"),
        ("Azure Functions permite crear funciones serverless", "FaaS")
    ]
    
    for i, (text, expected) in enumerate(multilingual_cases, 1):
        result = classifier.classify(text)
        correct = result['classification'] == expected
        status = "‚úÖ" if correct else "‚ùå"
        
        print(f"{i}. {status} Texto: {text}")
        print(f"   Esperado: {expected}")
        print(f"   Obtenido: {result['classification']}")
        print(f"   Confianza: {result['confidence']}%")
        print()

def test_performance():
    """Prueba el rendimiento con m√∫ltiples clasificaciones."""
    print("üß™ PRUEBA 5: Rendimiento")
    print("=" * 50)
    
    import time
    
    classifier = CloudServiceClassifier()
    
    # Texto de prueba
    test_text = "Amazon EC2 proporciona servidores virtuales en la nube con CPU, RAM y almacenamiento configurables"
    
    # Medir tiempo de clasificaci√≥n
    start_time = time.time()
    for _ in range(1000):
        result = classifier.classify(test_text)
    end_time = time.time()
    
    total_time = end_time - start_time
    avg_time = total_time / 1000 * 1000  # Convertir a milisegundos
    
    print(f"Tiempo total para 1000 clasificaciones: {total_time:.3f} segundos")
    print(f"Tiempo promedio por clasificaci√≥n: {avg_time:.3f} ms")
    print(f"√öltima clasificaci√≥n: {result['classification']} ({result['confidence']}%)")

def export_results():
    """Exporta los resultados de clasificaci√≥n a JSON."""
    print("üß™ PRUEBA 6: Exportaci√≥n de Resultados")
    print("=" * 50)
    
    classifier = CloudServiceClassifier()
    
    test_texts = [
        "Amazon EC2 proporciona servidores virtuales",
        "Heroku es una plataforma de desarrollo",
        "Salesforce es una aplicaci√≥n CRM",
        "AWS Lambda ejecuta funciones serverless"
    ]
    
    results = []
    for text in test_texts:
        result = classifier.classify(text)
        results.append({
            "text": text,
            "classification": result['classification'],
            "confidence": result['confidence'],
            "scores": result['scores'],
            "is_cloud_service": result['is_cloud_service']
        })
    
    # Guardar resultados en archivo JSON
    with open('classification_results.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    print(f"‚úÖ Resultados exportados a 'classification_results.json'")
    print(f"üìä Total de clasificaciones: {len(results)}")
    
    # Mostrar resumen
    for result in results:
        print(f"‚Ä¢ {result['classification']}: {result['confidence']}%")

def main():
    """Ejecuta todas las pruebas."""
    print("üöÄ INICIANDO PRUEBAS DEL CLASIFICADOR DE SERVICIOS EN LA NUBE")
    print("=" * 70)
    
    test_basic_classification()
    test_complex_texts()
    test_edge_cases()
    test_multilingual()
    test_performance()
    export_results()
    
    print("\nüéâ ¬°Todas las pruebas completadas!")
    print("=" * 70)

if __name__ == "__main__":
    main()
